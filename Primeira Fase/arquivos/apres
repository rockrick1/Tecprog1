#!/usr/bin/python3
import pygame as pg
import fileinput

from math import *

pg.init()                                 # inicialização do sistema

# altura e largura da arena, em células
H, W = 15,15

# largura da célula
l = 30
# altura da célula
L = 2*l/sqrt(3)

# cria a janela
# Trocamos 2 por 3 aqui para adaptar à nossa matriz em forma de losango,
# e nao quadrada
scr = pg.display.set_mode((3*W*l+l,int(1.5*L*H+L/2)))
# só para simplificar, atualização da imagem
atu = pg.display.update


# pinta o fundo da janela
scr.fill((0,200,0))
atu()
pg.time.wait(500)

def convert(i ,j):
    """
    Converte a coordenada (i,j) para a posição em pixels na janela
    """
    # Aqui tambem tiramos o %2 para representar a matriz em losango ao inves
    # de quadrada
    x = (1 + i)*l + 2*j*l
    y = 1.5*i*L + L
    return x,y

class Robô(pg.sprite.Sprite):
    """
    Representa um Robô, possui uma imagem
    """
    def __init__(s, img, x, y):
        """
        Construtor, img é o nome do arquivo com a imagem
        """
        pg.sprite.Sprite.__init__(s)
        s.image = pg.image.load(img)
        s.rect = s.image.get_rect()
        # Posição do robô
        s.x = x
        s.y = y

    def draw(s, i,j):
        """
        Desenha o sprite na célula (i,j)
        """
        x, y = convert(i,j)

        # fronteiras do sprite
        l0,h0,l1,h1 = s.rect

        # corrije a posição de acordo com o tamanho do sprite
        s.rect.topleft = [x-l1/2,y-h1/2]
        # desenha
        scr.blit(s.image, s.rect)

class Base(pg.sprite.Sprite):
    """
    Representa uma Base, idêntico ao feito com robôs
    Se desejarmos, mudamos os parâmetros em draw para
    deixar a centralização do sprite diferente dos robôs
    """
    def __init__(s, img):
        """
        Construtor, img é o nome do arquivo com a imagem
        """
        pg.sprite.Sprite.__init__(s)
        s.image = pg.image.load(img)
        s.rect = s.image.get_rect()

    def draw(s, i,j):
        """
        Desenha o sprite na célula (i,j)
        """
        x, y = convert(i,j)

        # fronteiras do sprite
        l0,h0,l1,h1 = s.rect

        # corrije a posição de acordo com o tamanho do sprite
        s.rect.topleft = [x-l1/2,y-h1/2]
        # desenha
        scr.blit(s.image, s.rect)


class cell:
    """
    Representa uma das células da arena
    """
    def __init__(s,i,j):
        """
        Construtor, i e j formam a coordenada
        """
        # Posição do centro
        s.cx, s.cy = convert(i,j)

        # Cor (pode ser passada para o construtor no futuro)
        s.cor = (200,200,200)

        # Tipo de terreno da celula, a ser definido depois
        s.terreno = None

        # Vértices do hexágono
        s.pontos = (
            (s.cx,   s.cy-L),
            (s.cx+l, s.cy-L/2),
            (s.cx+l, s.cy+L/2),
            (s.cx,   s.cy+L),
            (s.cx-l, s.cy+L/2),
            (s.cx-l, s.cy-L/2),
            )

    def draw(s):
        """
        Desenha a célula
        """
        pg.draw.polygon(scr, s.cor, s.pontos, 0)
        pg.draw.lines(scr, (0,0,0), True, s.pontos, 2)
        atu()

    def drawTerreno(s, tipo, i, j):
        if tipo == 'ESTRADA':
            s.terreno = 'ESTRADA'
            s.cor = (100,100,100)

        elif tipo == 'RIO':
            s.terreno = 'RIO'
            s.cor = (0,0,150)

        elif tipo == 'MONTANHA':
            s.terreno = 'MONTANHA'
            s.cor = (100,100,0)

        elif tipo == 'LAVA':
            s.terreno = 'LAVA'
            s.cor = (250,0,0)

        s.cx, s.cy = convert(i, j)
        s.pontos = (
            (s.cx,   s.cy-L),
            (s.cx+l, s.cy-L/2),
            (s.cx+l, s.cy+L/2),
            (s.cx,   s.cy+L),
            (s.cx-l, s.cy+L/2),
            (s.cx-l, s.cy-L/2),)
        pg.draw.polygon(scr, s.cor, s.pontos, 0)
        pg.draw.lines(scr, (0,0,0), True, s.pontos, 2)
        atu()


# Construção da matriz que representa a arena
arena = []
for i in range(15):
    arena.append([])
    for j in range(15):
        arena[i].append(cell(i,j))
        arena[i][j].draw()

# lista dos robôs definidos
robs = []

# lista das bases
base = []

# atualiza a janela
atu()

# Leitura dos comandos pela entrada padrão ou de um arquivo
for line in fileinput.input():
    r = line.split()

    # linha começando com 'fim', termina o programa
    if r[0] == 'fim':
        break

    # linha começando com 'rob', inclui um robô,
    # o segundo argumento na linha é a imagem
    # Agora tambem desenha o robô :D
    if r[0] == 'rob': # Agora o robo recebe suas coordenada na criação
        robs.append(Robô(r[1], int(r[2]), int(r[3])))
        # Desenha o ultimo robo da lista
        tmp = len(robs) - 1
        robs[tmp].draw(robs[tmp].y, robs[tmp].x)
        continue

    # linha começando com 'base', inclui uma base,
    # o segundo argumento na linha é a imagem
    if r[0] == 'base':
        base.append(Base(r[1]))
        continue

    # linha começando com 'drawbase', executar código
    # responsável por desenhar uma base
    # OBS: esse approach pode deixar o código bem extenso,
    # mas foi o que eu consegui pensar/fazer por enquanto
    if r[0] == 'drawbase':
        r.remove(r[0])
        bi, pi, pj = list(map(int, r))
        if 0 <= pi < W and 0 <= pj <= H and bi < len(base):
            base[bi].draw(pi,pj)

    # Pinta as celulas da arena de acordo com os terrenos
    if r[0] == 'terreno':
        r.remove(r[0])
        tipo = r[0]
        r.remove(r[0])
        ti, tj = list(map(int, r))
        arena[ti][tj].drawTerreno(tipo, ti, tj)

    # linha de movimentação: começa com move
    # robô, corrdenadas de origem, coordenadas de destino
    # OBS: precisei fazer o metodo de comecar com string e
    # depois tirá-la do array pois as linhas adicionais
    # que envolvessem inteiros tentavam ser colocadas
    # nessa list (por estar if), dando o seguinte erro na exec:
    # ValueError: not enough values to unpack (expected 5, got 3)
    if r[0] == 'move':
        pg.time.wait(500)
        r.remove(r[0])
        # Aqui optamos por remover o ri uma vez que vimos ser mais facil
        # apenas procurar pelo robo com a mesma posição do que queriamos
        # mover
        oj, oi, dj, di = list(map(int, r))

    # desenha o robô na célula de destino
        if 0 <= di < W and 0 <= dj < H:
            # Procura o robo requisitado no vetor de robos e atualiza sua pos
            for i in range(len(robs)):
                if oi == robs[i].y and oj == robs[i].x:
                    robs[i].draw(di,dj)
                    robs[i].x = dj
                    robs[i].y = di

    # redesenha a célula original (apaga o robô)
    ### inverti a ordem de execução para corrigir um bug no
    ### original (deletar esse comentário posteriormente)
    ### problema: quando a célula é redesenhada para apagar o robô
    ### ela por consequência apaga qualquer outro sprite colocado
    ### na mesma célula que o robô estava (assim, quando um robô
    ### sair de uma célula com cristal e não coletá-lo, precisamos
    ### achar uma maneira de manter o sprite do cristal desenhado
    ### ou redesenhá-lo por meio de algum flag ou coisa do tipo)
        if 0 <= oi  < W and 0 <= oj < H:
            arena[oi][oj].draw()

    # tempo de espera para atualização, apenas para testes

    atu()

pg.quit()
# Local variables:
# mode: python
# End:
