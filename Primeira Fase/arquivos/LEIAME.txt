////////////////////////////////////////////////////////////////////////
// Nome: Leonardo Ikeda                                 NUSP: 10262822//
// Nome: Henrique Cerquinho                             NUSP: 9793700///
// Nome: Henrique Suzuki                                NUSP: 10297626//
////////////////////////// COMPILAÇÃO //////////////////////////////////

    Para rodar a maquina virtual, temos duas opções:

    Rodar o montador em python3 dando como argumento o nome do
arquivo com código em linguagem de maquina, em seguida rodar
make e finalmente ./motor

    Rodar o script run: mudar a permissão de execução com
chmod +x ./script.sh e em seguida rodá-lo com ./run.sh e o nome
do arquivo em linguagem de máquina como argumento

    Caso não queira rodar o comando make na primeira opção, basta
compilar com o comando:

gcc -pedantic -O2 motor.c maq.c maq.h pilha.c pilha.h instr.h -o motor

e rodar ./motor

////////////////////////// SEGUNDA FASE ////////////////////////////////

    Vale comentar que, para a implementação da arena (de grid hexagonal)
foram usadas coordenadas quadradas e cúbicas, assim como usas respectivas
conversões, e usando uma arena em formato 'rhombus', com explicado no link
postado no paca (http://www.redblobgames.com/grids/hexagons/).
    Além disso, a ordem dos 'includes' foi alterada dos arquivos fornecidos
inicialmente para podermos encaixar as funções da arena e usarmos funções de
Maquina nas funções de arena.

////////////////////////// TERCEIRA/QUARTA FASE ////////////////////////////////

    Como entregamos a terceira fase em um ponto em que nem a segunda fase
estava pronta, iremos juntar os comentarios da terceira e da quarta fase aqui.

    Para a terceira fase, foram adicionados diversos fprintf's ao longo
das chamadas de sistema das maquinas virtuais, assim elas davam comandos
para o modulo 'apres' para atualizar o display do jogo.
    Sobre adaptações, vale comentar que nossa matriz era na forma de
losango, e a do gubi, quadrada, portanto adaptamos a função 'convert' para
retornar valores de forma a gerar a matriz em forma de losango. Ainda no
modulo apres, foram adicionadas novos metodos e variaveis para a classe
'cell', para que essa pudesse ter informações sobre o terreno e cristais
e metodos novos para desenhá-los quando necessario.
    Quanto aos comandos que podiam ser recebidos no arquivo de display,
adicionamos o 'terreno tipo i j', que define uma celula com terreno do tipo
fornecido (estrada, rio, etc.) e a desenhava. Tambem adicionamos o comando
'cristal n i j' que definia o numero de cristais em uma celula de coordenadas
i j e desenhava um cristal nela caso n>0.

    Fora isso, admitimos que, no quesito de completar as chamadas
de sistema nessa fase, não conseguimos implementar uma chamada de ataque para
os robôs, por isso implementamos um terreno de lava, que danifica o robô quando
este entra nesse terreno.

*adicionar comentarios da 4a fase aqui*